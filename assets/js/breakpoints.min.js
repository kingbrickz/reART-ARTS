

// Define the breakpoints module
var breakpoints = function () {
    "use strict";

    // Object to hold methods and properties related to managing breakpoints
    var module = {
        list: null,
        media: {}, 
        events: [], 

        // Initialize the module with a list of breakpoints
        init: function (breakpointList) {
            module.list = breakpointList;
            window.addEventListener("resize", module.poll);
            window.addEventListener("orientationchange", module.poll);
            window.addEventListener("load", module.poll);
            window.addEventListener("fullscreenchange", module.poll);
        },

        // Check if a breakpoint is active
        active: function (breakpoint) {
            if (!(breakpoint in module.media)) {
                // Construct media query string based on the breakpoint identifier
                var mediaQuery = module.constructMediaQuery(breakpoint);
                // Store the media query string
                module.media[breakpoint] = !!mediaQuery && mediaQuery;
            }
            // Check if the media query matches the current viewport width
            return module.media[breakpoint] !== false && window.matchMedia(module.media[breakpoint]).matches;
        },

        // Register an event handler for a specific breakpoint
        on: function (breakpoint, handler) {
            module.events.push({ query: breakpoint, handler: handler, state: false });
            if (module.active(breakpoint)) handler();
        },

        // Poll for changes in viewport size or orientation
        poll: function () {
            module.events.forEach(function (event) {
                var isActive = module.active(event.query);
                if (isActive && !event.state) {
                    // Trigger the event handler if the breakpoint becomes active
                    event.handler();
                    event.state = true;
                } else if (!isActive && event.state) {
                    // Reset the state if the breakpoint becomes inactive
                    event.state = false;
                }
            });
        },

        // Construct media query string based on the breakpoint identifier
        constructMediaQuery: function (breakpoint) {
            var query = module.list[breakpoint];
            if (query && typeof query === "string") {
                return query.charAt(0) === "(" ? "screen and " + query : query;
            } else if (query && Array.isArray(query)) {
                var min = query[0], max = query[1];
                return "screen and (min-width: " + min + "px) and (max-width: " + max + "px)";
            }
            return null;
        }
    };

    // Expose public methods
    return {
        _: module,
        on: module.on,
        active: module.active
    };
}();

// Export the module for AMD and CommonJS module systems
(function (root, factory) {
    if (typeof define === "function" && define.amd) {
        define([], factory);
    } else if (typeof exports === "object") {
        module.exports = factory();
    } else {
        root.breakpoints = factory();
    }
})(this, function () {
    return breakpoints;
});
